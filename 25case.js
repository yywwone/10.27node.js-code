
// 通过 require 既可以加载系统模块，也可以加载文件模块

// 关于 require 的使用有一些细节

// require 本身是一个函数

// 传递不同的参数，其执行结果不同

// 1、当传入一个字符串不以 ./ 或 ../ 开头 

// 会自动当成系统模块进行加载

// 注：以往我认为路径不写 . ，会默认当成 ./ （即当前）
// 来解析

// require('23cart.js');

// 2、Nodejs 会自动将 .js 和 .json 结尾文件视模块
// 所以在使用 require 加载模块时，可以省略 .js 和 .json 后缀

// require('./23cart');

// let users = require('./24users');

// console.log(users);



// 关于 require 加载模块，还可以分成更多情况

// 3、在当前目录中存在 node_modules 这样一个特殊目录时

// 在使用 require 时，如果没有使用 ./ 或 ../ (相对路径)

// 会优先去 node_modules 下查找，如果查找不到再查找父级目录

// 有没有 node_modules ，如果存在，则在父级的 node_modules 下查找

// 如果父级没有 node_modules 再找父级 .... 如果一直未找到 node_modules

// 才会认为是 系统模块

// require('23cart');

// 4、也可将模块拆分成若干小文件，将这些相关的小文件放到同一目录下
// 那么这个目录便认为是一个模块

// 在加载时模块时，Nodejs 可以省略后缀，这样就会导致歧义产生
// 例如 ./cart 既可以理解成 ./cart 这个目录 也可以理解成 ./cart.js

// 遇到这样情况时，Nodejs 会优先当成目录来对待，再去查找目录中有没有 index.js

// 如果没有找到，则表明当成目录加载失败，再尝试加载文件

// require('./cart');

// 当将多个文件放到同一目录下时，需要对此模块进行说明
// 通常将模块形象的称为包，当需要对包（模块）进行说明时
// 需要一个通过一个文件进行说明，称为包描述文件
// 并且这个文件的名字固定的为 package.json
// 在这个描述文件中可以写任意内容，只要符合 json 语法
// 但是有几项是必须的，例如 版本 名称 作者 等
// 
// 这个文件可以手工创建也可以通命令进行创建
// 当使用命令创建时，需要在 包的根目录 执行 npm init 即可

// require('./cart');

require('cart');